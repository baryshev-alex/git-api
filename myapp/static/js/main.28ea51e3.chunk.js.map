{"version":3,"sources":["components/formSearch.js","components/userInfo.js","App.js","serviceWorker.js","index.js"],"names":["FormSearch","props","react_default","a","createElement","className","id","onSubmit","search","type","name","placeholder","value","UserInfo","avatar_url","href","html_url","src","alt","bio","location","followers","public_repos","following","error","baseUrl","App","state","undefined","searchUser","_callee","e","userItem","api_url","user","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","ghusername","fetch","concat","sent","json","console","log","_this","setState","stop","formSearch","this","userInfo","Component","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.28ea51e3.chunk.js","sourcesContent":["import React from 'react';\n\nconst FormSearch = (props) => (\n  <div className=\"row justify-content-center form-user-row\">\n    <form className=\"w-100 form_input\" id=\"myForm\" onSubmit={props.search}>\n        <input \n          className=\"form-control form_input_search\"\n          type=\"text\" \n          name=\"ghusername\" \n          id=\"ghusername\" \n          placeholder=\"Github username...\"/>\n        <input \n          className=\"btn form_input_btn\"\n          type=\"submit\" \n          value=\"\"/> \n    </form>\n  </div>\n);\n\nexport default FormSearch;\n","import React from 'react';\n\nconst UserInfo = (props) => (\n    <div>\n        { props.avatar_url &&\n            <div className=\"row profile pt-5\">\n                <div className=\"profile-avatar\">\n                    <a href={props.html_url}>\n                        <img src={props.avatar_url} alt=\"avatar\" className=\"rounded-circle profile-avatar_img\"/>\n                    </a>\n                    <div className=\"profile-avatar_info pt-5 pb-5\">\n                        <h2>{props.name}</h2>\n                        <h5>{props.bio}</h5>\n                        <h6>{props.location}</h6>\n                    </div>\n                </div>\n                <div className=\"profile_state\">\n                    <ul>\n                        <li>\n                            <p>Followers</p> \n                            <span>{props.followers}</span>\n                        </li>\n                        <li>\n                            <p>Repositoriy</p>\n                            <span>{props.public_repos}</span>\n                        </li>\n                        <li>\n                            <p>Following</p>\n                            <span>{props.following}</span>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        }\n        <span className=\"error\">{props.error}</span>\n    </div>\n);\n\nexport default UserInfo;","import React, { Component } from 'react';\nimport FormSearch from './components/formSearch';\nimport UserInfo from './components/userInfo';\n\n\nconst baseUrl = 'https://api.github.com/users';\n\n\n\nclass App extends Component {\n\n  state = {\n    avatar_url: undefined,\n    public_repos: undefined,\n    name: undefined,\n    bio: undefined,\n    following: undefined,\n    followers: undefined,\n    location: undefined,\n    html_url: undefined,\n    error: undefined\n  }\n\n  searchUser = async (e) => {\n    e.preventDefault();\n    const userItem = e.target.elements.ghusername.value;\n    if(userItem){\n      const api_url = await \n      fetch(`${baseUrl}/${userItem}`);\n      const user = await api_url.json();\n      console.log(user);\n\n      this.setState({\n        avatar_url: user.avatar_url,\n        public_repos: user.public_repos,\n        name: user.name,\n        bio: user.bio,\n        following: user.following,\n        followers: user.followers,\n        location: user.location,\n        html_url: user.html_url,\n        error: undefined\n      });\n    } else {\n      this.setState({\n        avatar_url: undefined,\n        public_repos: undefined,\n        name: undefined,\n        followers: undefined,\n        following: undefined,\n        location: undefined,\n        bio: undefined,\n        html_url: undefined,\n        error: \"fill in the field\"\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper mt-5 mb-5\">\n        <div className=\"container block-popup\">\n          <FormSearch search={this.searchUser}/>\n          <UserInfo \n            avatar_url={this.state.avatar_url}\n            public_repos={this.state.public_repos}\n            name={this.state.name}\n            bio={this.state.bio}\n            following={this.state.following}\n            followers={this.state.followers}\n            location={this.state.location}\n            html_url={this.state.html_url}\n            error={this.state.error}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}